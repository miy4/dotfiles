# ls
ls -lXB   #拡張子順
ls -lSr   #ファイルサイズ順
ls -ltcr  #更新順
ls -ltur  #アクセス順

# sed, awk
sed -n 5,100p _    # 5行目から100行目を出力

# od
od -Ax -tx1z _     # バイナリエディタ風
od -Ax -tx1c _     # 上下に並べる

# date
date +%s                             # UNIX時間
date -d "2012-9-12 16:32" +%s        # 日付→UNIX時間
date -d @1410624155 +"%Y/%m/%d %T"   # UNIX時間→日付

# calculator
bc -l <<< '1+1'    # 計算機

# zip, unzip
unzip -Z .zip
zipinfo .zip

# fileutil
find . -type f -print0 | xargs -0 ls -la | sort -nr -k5
find . -size +100M -type f -exec du {} \;                  # 100MB超えのファイル
du -b . | sort -nr
noglob zmv -W    # *.xxx *.yyy
stat -c '%a' _   # パーミッション(数字)を表示
wc -l            # 行数
wc -m            # 文字数
wc -w            # ワード数
wc -c            # バイト数
shuf -n 10 _     # ランダムで10行ピックアップ
mdfind _         # Spotlightファイル検索
mdls _           # ファイルメタ情報

# pager
less -S   # (または起動中に-Sr) 1行で表示する
less -R   # (または起動中に-Rr) ANSIカラーシーケンスを表示する
less +F   # (または起動中にF) tail -f モード

# process
pstree -p        # プロセス一覧(ツリー表示)
netstat -ptln    # Listenポート(TCP)持ちのプロセス
ss -ptln         # Listenポート(TCP)持ちのプロセス

# sysstat
lsof _           # ファイルオープン中のプロセス
lsof -P -i:_     # N番ポートオープン中のプロセス
lsof -P -c _     # プロセスNのファイル
lsof -n -P -p _  # PID N番のファイル
sar -q           # ロードアベレージ
sar -u           # CPU使用率
sar -b           # I/O
sar -r           # メモリとスワップ使用率
sar -s _:_:_     # X時Y分Z秒以降のデータ
sar -e _:_:_     # X時Y分Z秒までのデータ

# xargs
_ | xargs -L 1 -P 2 _    # 引数1個、並列2件
_ | xargs -I{} _ {} _    # プレースホルダ

# traceroute
traceroute -T -p 80     # TCP
traceroute -U -p 53     # UDP
traceroute -I           # ICMP

# wget
wget -q --http-user= --http-password= http://

# curl
curl ifconfig.me         # リモートIP
curl ifconfig.me/host    # リモートホスト
curl 'http://' -H 'HTTP Header' --compressed -o filename -C -   # ヘッダ指定、レンジリクエストによるレジュームを有効
curl -d _name1_=_value1_ -d _name2_=_value2_ 'http://'          # x-www-form-urlencoded 形式で POST (URLエンコードしない)
curl --data-urlencode _name_=_value_ 'http://'                  # x-www-form-urlencoded 形式で POST (URLエンコードする)
curl --data-binary '@_file_' 'http://'                          # x-www-form-urlencoded 形式で ファイルの内容を POST
curl -F '_name_=@_file_' 'http://'                              # multipart/form-data 形式で ファイルの内容を POST

# git
git add 
git add .
git add -A 
git branch
git branch -a            # ブランチ一覧 
git branch -d _          # ブランチ削除
git commit
git commit -m
git commit --amend       # 直前のログを修正
git checkout
git checkout -b _        # ブランチを作成して、切り替え
git checkout master
git checkout -- _        # 前回のコミットに戻す
git diff
git diff HEAD
git diff --staged        # stagingとHEADの差分
git init
git log
git log --graph --oneline --decorate --all
git log --pretty=format:"%h %ad %s" --date=short --all
git merge _              # 今のブランチと_をマージ
git merge --no-ff
git push
git push -u origin master
git pull
git reset                # stagingのファイルを取り消し
git status -s
git stash
git stash list
git stash pop
git stash drop
git remote -v            # リモートの一覧
git remote add _ _       # リモートを追加 _1:名前 _2:URL

# tcpdump/ngrep
tcpdump -i any -s0 -w _         # キャプチャ、ファイル保存
tcpdump -r _ port 80            # -wのデータを読み込み、80番ポートを出力
tcpdump -i any -nlx | tee _     # 標準出力&ファイル出力
tcpdump -i any -s0 -A port 80   # ASCIIで80番ポートを出力
ngrep -W byline -q port 80

# openssl
openssl pkcs12 -in foo.p12 -nocerts -nodes -out foo.key.pem   # PKCS12->秘密鍵
openssl pkcs12 -in foo.p12 -clcerts -nokeys -out foo.cert.pem # PKCS12->証明書

# Digest
openssl md5 file     # MD5
openssl sha1 file    # SHA1
md5sum file          # MD5
shasum -a 256 file   # SHA256

# abcde
abcde -o flac:"-8" -d /dev/disk3
abcde -o flac:"-8" -d /dev/disk4 1-4

# metaflac
metaflac --export-tags-to=- .flac
metaflac --set-tag=ARTIST="" --set-tag=ALBUM="" --set-tag=TITLE="" --set-tag=DATE= --set-tag=GENRE= --set-tag=TRACKNUMBER= .flac
metaflac --remove-tag= .flac
metaflac --export-picture-to=folder.jpg .flac
metaflac --import-picture-from=folder.jpg .flac

# netcat
echo "hello" | nc -u -w 0 localhost 5432                    # localhost:5432へUDP送信
dd if=/dev/urandom count=1024 | nc -u -w 0 localhost 5100   # 1024バイトのランダムデータを送信
nc -ul -w 0 5432                                            # 5432ポートでUDP待ち受け
(echo "HTTP/1.0 200 Ok"; echo; echo) | nc -l 80             # 簡易HTTPサーバ

# apt-get, dpkg
sudo apt-get install -y _  # パッケージのインストール
sudo apt-get update        # パッケージリストの更新
sudo apt-get upgrade       # パッケージの更新
sudo apt-get dist-upgrade  # ディストリの更新
dpkg -l                    # インストール済パッケージの一覧
dpkg -L _                  # インストール済パッケージのファイル一覧
apt-cache search _         # パッケージの検索
sudo apt-get remove _      # パッケージの削除
sudo apt-get autoremove    # 未使用パッケージを削除
sudo apt-get purge _       # パッケージ、設定ファイルを削除
sudo apt-get clean         # アーカイブファイルを削除
sudo apt-get autoclean     # 未使用パッケージのアーカイブファイルを削除

# pacman
sudo -E pacman -S --noconfirm _  # パッケージのインストール
sudo -E pacman -Syy              # DBの更新
sudo -E pacman -Syu              # 全パッケージのアップグレード
yaourt -Syua                     # 全パッケージのアップグレード(pacman+yaourt両方)
sudo pacman -R _                 # 指定のパッケージのみ削除
sudo pacman -Rs _                # 指定のPKG＆依存PKGを削除(他PKGが使っている時は残す)
pacman -Ss _                     # パッケージを検索
pacman -Si _                     # パッケージの情報
pacman -Ql                       # パッケージによってインストールされたファイルの一覧

# rpm
rpm -qa      # インストール済のパッケージ一覧
rpm -ql _    # パッケージの中身
rpm -qf _    # このファイルはどのパッケージのものか
rpm -qi _    # パッケージの概要

# docker
docker images                                                 # イメージの一覧
docker pull <image>:<tag>                                     # イメージをダウンロードする
docker history <image>:<tag>                                  # イメージのコマンド履歴
docker inspect <image>:<tag>                                  # イメージの情報
docker rmi <imageid>                                          # イメージを削除する
docker run -it <image>:<tag> <command>                        # コンテナの作成と実行(フォアグラウンド)
docker run -rm -it <image>:<tag> <command>                    # コンテナの作成と実行(コマンド完了後、コンテナ破棄)
docker run -d <image>:<tag> <command>                         # コンテナの作成と実行(バックグラウンド)
docker run -v <hostdir>:<mountpoint> <image>:<tag> <command>  # ホストのディレクトリをマウントする
docker commit -m "..." <containerid> <username>/<image>       # コンテナからイメージを作成する
docker build <username>/<image> <dir>                         # Dockerfile からイメージを作成する
docker stop <containerid>                                     # コンテナを停止する
docker start <containerid>                                    # コンテナを起動する
docker restart <containerid>                                  # コンテナを再起動する
docker attach <containerid>                                   # 起動中のコンテナにログイン
docker cp <containerid>:<file> .                              # コンテナ内のファイルをローカルにコピー
docker ps -a                                                  # コンテナの一覧
docker ps -l -q                                               # 直前のコンテナID
docker inspect <containerid>                                  # コンテナの情報
docker logs <containerid>                                     # コンテナのログ
docker top <containerid>                                      # コンテナのプロセス
docker rm <containerid>                                       # 停止中のコンテナを削除する
docker-machine create --driver virtualbox _  # Virtualbox上でboot2docker
docker-machine rm _                          # マシンを削除する
docker-machine ls                            # マシンの一覧
docker-machine inspect _                     # マシン情報を表示
docker-machine ip _                          # マシンのIPアドレスを表示
docker-machine start _                       # マシンを起動する
docker-machine stop _                        # マシンを停止する
docker-machine kill _                        # マシンを強制停止する
docker-machine restart _                     # マシンを再起動する
docker-machine ssh _                         # SSHログイン
docker-machine ssh _ -- _                    # SSH経由でコマンド実行 
docker $(docker-machine config _) _          # 指定したマシン上でdockerコマンドを実行できる
eval "$(docker-machine env _)"               # 以降、指定したマシン上でdockerコマンドを実行できる
eval "$(docker-machine env _ -u)"            # 設定したDOCKER環境変数を無効にする
