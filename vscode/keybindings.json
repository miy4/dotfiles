// Place your key bindings in this file to override the defaults
[
	{
		"key": "alt+oem_period",
		"command": "editor.action.revealDefinition",
		"when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
	},
	{
		"key": "f12",
		"command": "-editor.action.revealDefinition",
		"when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
	},
	{
		"key": "alt+oem_2",
		"command": "editor.action.triggerSuggest",
		"when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
	},
	{
		"key": "ctrl+space",
		"command": "-editor.action.triggerSuggest",
		"when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
	},
	// Trigger vspacecode in empty editor group
	{
		"key": "space",
		"command": "vspacecode.space",
		"when": "activeEditorGroupEmpty && focusedView == '' && !whichkeyActive && !inputFocus"
	},
	// Trigger vspacecode when sidebar is in focus
	{
		"key": "space",
		"command": "vspacecode.space",
		"when": "sideBarFocus && !inputFocus && !whichkeyActive"
	},
	// Keybindings required for edamagit
	// https://github.com/kahole/edamagit#vim-support-vscodevim
	// Cannot be added to package.json because keybinding replacements
	{
		"key": "tab",
		"command": "extension.vim_tab",
		"when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert' && editorLangId != 'magit'"
	},
	{
		"key": "tab",
		"command": "-extension.vim_tab",
		"when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
	},
	{
		"key": "x",
		"command": "magit.discard-at-point",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "k",
		"command": "-magit.discard-at-point"
	},
	{
		"key": "-",
		"command": "magit.reverse-at-point",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "v",
		"command": "-magit.reverse-at-point"
	},
	{
		"key": "shift+-",
		"command": "magit.reverting",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "shift+v",
		"command": "-magit.reverting"
	},
	{
		"key": "shift+o",
		"command": "magit.resetting",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "shift+x",
		"command": "-magit.resetting"
	},
	{
		"key": "x",
		"command": "-magit.reset-mixed"
	},
	{
		"key": "ctrl+u x",
		"command": "-magit.reset-hard"
	},
	// Extra ref menu support for edamagit with the key "y"
	// Cannot be added to package.json because keybinding replacements
	{
		"key": "y",
		"command": "-magit.show-refs"
	},
	{
		"key": "y",
		"command": "vspacecode.showMagitRefMenu",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode == 'Normal'"
	},
	// Easy navigation in quick open/QuickPick
	{
		//"key": "ctrl+j",
		"key": "ctrl+n",
		"command": "workbench.action.quickOpenSelectNext",
		"when": "inQuickOpen"
	},
	{
		//"key": "ctrl+k",
		"key": "ctrl+p",
		"command": "workbench.action.quickOpenSelectPrevious",
		"when": "inQuickOpen"
	},
	// Easy navigation in suggestion/intellisense
	// Cannot be added to package.json because of conflict with vim's default bindings
	{
		//"key": "ctrl+j",
		"key": "ctrl+n",
		"command": "selectNextSuggestion",
		"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
	},
	{
		//"key": "ctrl+k",
		"key": "ctrl+p",
		"command": "selectPrevSuggestion",
		"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
	},
	{
		//"key": "ctrl+l",
		"key": "ctrl+m",
		"command": "acceptSelectedSuggestion",
		"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
	},
	// Easy navigation in parameter hint (i.e. traverse the hints when there's multiple overload for one method)
	// Cannot be added to package.json because of conflict with vim's default bindings
	{
		//"key": "ctrl+j",
		"key": "ctrl+n",
		"command": "showNextParameterHint",
		"when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
	},
	{
		//"key": "ctrl+k",
		"key": "ctrl+p",
		"command": "showPrevParameterHint",
		"when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
	},
	// Easy navigation in code action
	{
		//"key": "ctrl+j",
		"key": "ctrl+n",
		"command": "selectNextCodeAction",
		"when": "codeActionMenuVisible"
	},
	{
		//"key": "ctrl+k",
		"key": "ctrl+p",
		"command": "selectPrevCodeAction",
		"when": "codeActionMenuVisible"
	},
	{
		//"key": "ctrl+l",
		"key": "ctrl+m",
		"command": "acceptSelectedCodeAction",
		"when": "codeActionMenuVisible"
	},
	// Add ctrl+h/l to navigate in file browser
	{
		"key": "ctrl+h",
		"command": "file-browser.stepOut",
		"when": "inFileBrowser"
	},
	{
		"key": "ctrl+l",
		"command": "file-browser.stepIn",
		"when": "inFileBrowser"
	},
	// Use Emacs keys while in insert mode
	{
		"key": "ctrl+f",
		"command": "editor.action.insertCursorBelow",
		"when": "editorTextFocus"
	},
	{
		"key": "ctrl+f",
		"command": "cursorRight",
		"when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode == 'Insert'"
	},
	{
		"key": "ctrl+b",
		"command": "cursorLeft",
		"when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode == 'Insert'"
	},
	{
		"key": "ctrl+n",
		"command": "-workbench.action.files.newUntitledFile"
	},
	{
		"key": "ctrl+n",
		"command": "cursorDown",
		"when": "editorTextFocus && vim.active && !suggestWidgetVisible && !inDebugRepl && vim.mode == 'Insert'"
	},
	{
		"key": "ctrl+p",
		"command": "cursorUp",
		"when": "editorTextFocus && vim.active && !suggestWidgetVisible && !inDebugRepl && vim.mode == 'Insert'"
	},
	{
		"key": "ctrl+e",
		"command": "cursorEnd",
		"when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode == 'Insert'"
	},
	{
		"key": "alt+b",
		"command": "cursorWordLeft",
		"when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode == 'Insert'"
	},
	{
		"key": "alt+f",
		"command": "cursorWordEndRight",
		"when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode == 'Insert'"
	},
	{
		"key": "ctrl+a",
		"command": "cursorHome",
		"when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode == 'Insert'"
	},
	{
		"key": "ctrl+h",
		"command": "deleteLeft",
		"when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode == 'Insert'"
	},
	{
		"key": "ctrl+d",
		"command": "deleteRight",
		"when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode == 'Insert'"
	}
]